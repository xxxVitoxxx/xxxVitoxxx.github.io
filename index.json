[{"categories":[""],"content":"軟體 pgAdmin Heroku PostgreSQL project ","date":"2022-12-09","objectID":"/operate-heroku-pg-using-pgadmin/:1:0","tags":[""],"title":"透過 pgAdmin 操作 Heroku PostgreSQL Database","uri":"/operate-heroku-pg-using-pgadmin/"},{"categories":[""],"content":"建立 postgres 登入Heroku，進到有Postgre專案的Resource，點擊Heroku Postgres 點選settings，我們需要 ‘Host’、‘Database’、‘User’、‘Port’、‘Password’ 的資訊 ","date":"2022-12-09","objectID":"/operate-heroku-pg-using-pgadmin/:2:0","tags":[""],"title":"透過 pgAdmin 操作 Heroku PostgreSQL Database","uri":"/operate-heroku-pg-using-pgadmin/"},{"categories":[""],"content":"建立與Heroku PostgreSQL資料庫的連結設定 開啟pgAdmin，在左上角的Servers點擊右鍵 →Create →Server… 在General標簽頁中，Name 欄位輸入可識別的名稱 在Connection標簽頁中 Host name/address 對應 Heroku Postgres的Host Port 對應 Heroku Postgres的Port Maintenance database 對應 Heroku Postgres的Database Username 對應 Heroku Postgres的User Password 對應 Heroku Postgres的Password Save password 勾選起來 在SSL標簽頁中，SSLmode 選擇Allow 關於其他選項可參考文件 在Advanced標簽頁中 DB restriction對應 Heroku Postgres的Database 點擊下方 Save存儲 存儲後打開的畫面可以看到在Heroku PostgreSQL的所有資料表都在Tables標籤下 ","date":"2022-12-09","objectID":"/operate-heroku-pg-using-pgadmin/:3:0","tags":[""],"title":"透過 pgAdmin 操作 Heroku PostgreSQL Database","uri":"/operate-heroku-pg-using-pgadmin/"},{"categories":[""],"content":"利用SQL語法來查詢資料庫的資料 在左邊的框框點擊右鍵選擇Query Tool 輸入SQL語法點擊右上方的三角形圖案執行命令 ","date":"2022-12-09","objectID":"/operate-heroku-pg-using-pgadmin/:4:0","tags":[""],"title":"透過 pgAdmin 操作 Heroku PostgreSQL Database","uri":"/operate-heroku-pg-using-pgadmin/"},{"categories":["git"],"content":"建立 ssh key 和 git clone 、 git push 教學 GitHub 提供了兩種連線方式，分別是https與ssh，兩者最大的差別在於ssh可以立刻上傳，不需要輸入密碼，且安全性高。 ","date":"2021-05-17","objectID":"/git-clone-ssh-key/:0:0","tags":["ssh key"],"title":"Git Clone With SSH Key","uri":"/git-clone-ssh-key/"},{"categories":["git"],"content":"如何透過ssh連結GitHub 第一步：依作業系統下載對應的Git(本示範系統是macos) (或透過Homebrew download: $ brew install git) 第二步：產生金鑰 $ ssh-keygen -t rsa -b 4096 -C ' your id ' 用ssh-keygen建立金鑰 系統會請你輸入通行碼(若沒輸入直接回車，之後clone就不用輸入密碼) 再輸入一次通行碼後會顯示ssh的公鑰及私鑰路徑檔名 第三步： 將id_rsa.pub(公鑰)的內容新增到GitHub的Settings的SSH keys (公鑰的內容) $ cat ./.ssh/id_rsa.pub 點擊Add就大功告成！！！ ","date":"2021-05-17","objectID":"/git-clone-ssh-key/:1:0","tags":["ssh key"],"title":"Git Clone With SSH Key","uri":"/git-clone-ssh-key/"},{"categories":["git"],"content":"clone 第一步：先在終端機進到你要建立專案的地方。 $ cd 要建立專案的地方 第二步：clone 專案到本機 $ get clone '專案ssh網址' 第三部：輸入通行碼(若當初有設定的話) 下圖表示成功將專案裡的檔案clone到主機 clone下來的資料夾名稱會是你的GitHub的repository名稱 ","date":"2021-05-17","objectID":"/git-clone-ssh-key/:2:0","tags":["ssh key"],"title":"Git Clone With SSH Key","uri":"/git-clone-ssh-key/"},{"categories":["git"],"content":"push 第一步：示範新增一個名為README.md的檔案 並將新檔案丟到專案(xxxVitoxxx.github.io)的資料夾裡，並cd到專案的資料夾 第二步：確認專案的資料夾做了哪些更動 $ git status (紅色字體代表有更改過的檔案) 第三步：將新增的檔案加到Git版本控管 $ git add . (注意！！！這邊只是將專案資料夾的所有檔案加到Git工作目錄的索引中，尚未加到Git版本庫)。 可以再輸入一次 $ git status 確認專案資料夾的檔案是否已成功更新(綠色字體代表成功更新檔案) 第四步：為修改記錄命名一個名稱 $ git commit -m \"commit message\" 這邊將第一次修改記錄命名為’first commit' $ git log 可以查看該專案的修改紀錄 第五步： $ git push 將剛剛新增的檔案推到GitHub上 ","date":"2021-05-17","objectID":"/git-clone-ssh-key/:3:0","tags":["ssh key"],"title":"Git Clone With SSH Key","uri":"/git-clone-ssh-key/"},{"categories":null,"content":"About","date":"2019-08-02","objectID":"/about/","tags":null,"title":"About","uri":"/about/"}]